# coding=utf-8import cv2import sysimport argparseimport face_recog.face_mainimport barcode.barcodefrom face_recog.face_main import Faceimport digit.digit_mainfrom digit.recognize_digit.recognition_tensorflow import Digit_recognitionimport threading ,Queueimg=[]def thread_read(cap,thread_lock):    print('start read')    global img    while True:        ret,data=cap.read()        thread_lock.acquire()        # print('read get lock')        img=data        # print('read data')        thread_lock.release()        # time.sleep(0.01)def thread_show(thread_lock):    print('start show')    global img    old_data = None    while True:        thread_lock.acquire()        # print 'show get lock'        try:            # img_data=copy.deepcopy(img)            img_data=img        finally:            thread_lock.release()        if img is not None:            cv2.imshow('vedio',img_data)            cv2.waitKey(1)        else:            print('img is ',img_data)        # time.sleep(0.01)        old_data=img_datadef thread_deal_face():    print('start face')    while True:        thread_lock.acquire()        print('face get thread')        pic=img        thread_lock.release()        if len(pic)<=0:            print pic            continue        face_result = recognition.recogniton(pic)        if face_result is not None:            for face in face_result:                # print(face.name)                bounding_box = face.bounding_box                cv2.rectangle(pic, (bounding_box[0], bounding_box[1]), (bounding_box[2], bounding_box[3]), (255, 0, 0), 2)                if face.name < 0.3:                    label = face.label                    print('face-recognition:',label)                    cv2.rectangle(pic, (bounding_box[0], bounding_box[1]), (bounding_box[2], bounding_box[3]),(255, 0, 0), 2)                    cv2.putText(pic, str(label), (bounding_box[0],bounding_box[3]),cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0),thickness=2, lineType=2)            cv2.imshow('face_find',pic)            cv2.waitKey(1)        else:            passdef thread_deal_digit():    passif __name__=='__main__':    thread_lock = threading.Lock()    cap = cv2.VideoCapture(0)    recognition=face_recog.face_main.Recognition(minsize=20)    t_face = threading.Thread(target=thread_deal_face)    t_digit = threading.Thread(target=thread_deal_digit)    t_read = threading.Thread(target=thread_read,args=(cap,thread_lock))    t_show = threading.Thread(target=thread_show,args=(thread_lock,))    print('creat threads')    t_read.start()    t_show.start()    t_face.start()    # video_capture = cv2.VideoCapture(number)    # digit_flag=0    # # save_vedio=Save_video()    # while video_capture.isOpened() :    #     ret, frame_ori = video_capture.read()    #     # face recognition    #     face_result=recognition.recogniton(frame_ori)    #     # barcode    #     # barcode_point,barcode_comment,barcode_number=barcode.barcode.detect_barcode(frame_ori)    #     barcode_point, barcode_comment,barcode_number=None,None,None    #     #dashboard    #     # dash_x,dash_y,dash_r=barcode.barcode.dash_bord(frame_ori)    #     dash_x, dash_y, dash_r=None,None,None